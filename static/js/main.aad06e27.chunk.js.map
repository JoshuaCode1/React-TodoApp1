{"version":3,"sources":["ListIems.js","App.js","serviceWorker.js","index.js"],"names":["ListItems","props","listItems","items","map","item","className","key","type","id","value","text","onChange","e","setUpdate","target","icon","faTrash","onClick","deleteItem","duration","easing","App","state","currentItem","handleInput","bind","addItem","this","setState","Date","now","preventDefault","newItem","console","log","newItems","filteredItems","filter","onSubmit","placeholder","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uWAwCeA,MAjCf,SAAmBC,GACf,IACMC,EADQD,EAAME,MACIC,KAAI,SAAAC,GAAI,OAC5B,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAC5B,2BACA,2BAAOC,KAAK,OACRC,GAAIJ,EAAKE,IACTG,MAAOL,EAAKM,KACZC,SACI,SAACC,GACGZ,EAAMa,UAAUD,EAAEE,OAAOL,MAAOL,EAAKE,QAIjD,8BACI,kBAAC,IAAD,CAAiBD,UAAU,UAAUU,KAAMC,IACvCC,QAAU,kBAAMjB,EAAMkB,WAAWd,EAAKE,cAQtD,OACI,6BACA,kBAAC,IAAD,CAAUa,SAAU,IAAKC,OAAO,eAC/BnB,KCoEMoB,E,kDAhGb,WAAYrB,GAAO,IAAD,8BAChB,cAAMA,IACDsB,MAAQ,CACXpB,MAAM,GACNqB,YAAY,CACVb,KAAM,IACNJ,IAAK,MAGT,EAAKkB,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,QAAU,EAAKA,QAAQD,KAAb,gBACf,EAAKP,WAAa,EAAKA,WAAWO,KAAhB,gBAClB,EAAKZ,UAAY,EAAKA,UAAUY,KAAf,gBAZD,E,wDAiBNb,GACVe,KAAKC,SAAS,CACZL,YAAa,CACXb,KAAME,EAAEE,OAAOL,MACfH,IAAKuB,KAAKC,W,8BAKNlB,GACNA,EAAEmB,iBACF,IAAMC,EAAUL,KAAKL,MAAMC,YAE3B,GADAU,QAAQC,IAAIF,GACM,KAAfA,EAAQtB,KAAU,CACnB,IAAMyB,EAAQ,sBAAOR,KAAKL,MAAMpB,OAAlB,CAAyB8B,IACvCL,KAAKC,SAAS,CACZ1B,MAAMiC,EACNZ,YAAY,CACVb,KAAK,GACLJ,IAAI,S,iCAODA,GACT,IAAM8B,EAAgBT,KAAKL,MAAMpB,MAAMmC,QAAO,SAAAjC,GAAI,OAAIA,EAAKE,MAAMA,KACjEqB,KAAKC,SAAS,CACZ1B,MAAMkC,M,gCAKA1B,EAAKJ,GACb,IAAMJ,EAAQyB,KAAKL,MAAMpB,MACzBA,EAAMC,KAAI,SAAAC,GACLA,EAAKE,MAAMA,IACZF,EAAKM,KAAKA,MAGdiB,KAAKC,SAAS,CACZ1B,MAAMA,M,+BASV,OACE,yBAAKG,UAAU,OACb,gCACA,0BAAMG,GAAG,aAAa8B,SAAWX,KAAKD,SACpC,2BAAOnB,KAAK,OAAOgC,YAAY,gBAC7B9B,MAASkB,KAAKL,MAAMC,YAAYb,KAChCC,SAAYgB,KAAKH,cAEnB,4BAAQjB,KAAK,UAAb,SAGF,kBAAC,EAAD,CAAWL,MAAOyB,KAAKL,MAAMpB,MAC3BgB,WAAcS,KAAKT,WACnBL,UAAac,KAAKd,iB,GAlFV2B,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.aad06e27.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./listItems.css\";\nimport { FontAwesomeIcon } from  \"@fortawesome/react-fontawesome\";\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\nimport FlipMove from \"react-flip-move\";\n\n\nfunction ListItems(props){\n    const items = props.items;\n    const listItems = items.map(item => (\n        <div className=\"list\" key={item.key}>\n            <p>\n            <input type=\"text\" \n                id={item.key} \n                value={item.text}\n                onChange={\n                    (e) => {\n                        props.setUpdate(e.target.value, item.key)\n                    }\n                }\n            />\n            <span>\n                <FontAwesomeIcon className=\"faicons\" icon={faTrash} \n                    onClick={ () => props.deleteItem(item.key)\n                    }/>\n                \n            </span>\n            </p>\n            \n        </div>\n    ));\n    return (\n        <div>\n        <FlipMove duration={300} easing=\"ease-in-out\">\n        {listItems}\n        </FlipMove>\n        </div>\n    );\n}\n\nexport default ListItems;","import React from 'react';\nimport './App.css';\nimport ListItems from \"./ListIems\";\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      items:[],\n      currentItem:{\n        text: \" \",\n        key: \" \"\n      }\n    }\n    this.handleInput = this.handleInput.bind(this);\n    this.addItem = this.addItem.bind(this);\n    this.deleteItem = this.deleteItem.bind(this);\n    this.setUpdate = this.setUpdate.bind(this);\n  }\n\n  \n\n  handleInput(e) {\n    this.setState({\n      currentItem: {\n        text: e.target.value,\n        key: Date.now()\n      }\n    })\n  }\n\n    addItem(e){\n      e.preventDefault();//prevents page reload\n      const newItem = this.state.currentItem;\n      console.log(newItem);\n      if(newItem.text!==\"\"){\n        const newItems = [...this.state.items, newItem];\n        this.setState({\n          items:newItems,\n          currentItem:{\n            text:\"\",\n            key:\"\"\n          }\n        });\n      }\n    }\n\n\n    deleteItem(key){\n      const filteredItems = this.state.items.filter(item => item.key!==key);\n      this.setState({\n        items:filteredItems\n      })\n    }\n\n\n    setUpdate(text,key){\n      const items = this.state.items;\n      items.map(item => {\n        if(item.key===key){\n          item.text=text;\n        }\n      })\n      this.setState({\n        items:items\n      })\n  \n    }\n\n    \n\n\n  render(){\n    return (\n      <div className=\"App\">\n        <header>\n        <form id=\"to-do-form\" onSubmit= {this.addItem}>\n          <input type=\"text\" placeholder=\"Todolist Here\" \n            value = {this.state.currentItem.text}\n            onChange = {this.handleInput}\n          />\n          <button type=\"submit\">Add</button>\n        </form>\n        </header>\n        <ListItems items={this.state.items} \n          deleteItem = {this.deleteItem}\n          setUpdate = {this.setUpdate}\n        >\n        </ListItems>\n      </div>\n    )\n  }\n}\n\n\n// const App = () => {\n//   return (\n//     <h1>Hi Everyone</h1>\n//   );\n// }\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}